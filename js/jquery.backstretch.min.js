/*! Backstretch - v2.0.4 - 2013-06-19
* http://srobbin.com/jquery-plugins/backstretch/
* Copyright (c) 2013 Scott Robbin; Licensed MIT */
(function ($, window, undefined) {
    $.fn.backstretch = function (images, options) {
        if (images === undefined || images.length === 0) {
            $.error("No images were supplied for Backstretch");
        }
        if ($(window).scrollTop() === 0) {
            window.scrollTo(0, 0);
        }

        return this.each(function () {
            var $this = $(this);
            var backstretchInstance = $this.data("backstretch");

            if (backstretchInstance) {
                if (typeof images === "string" && typeof backstretchInstance[images] === "function") {
                    backstretchInstance[images](options);
                    return;
                }

                options = $.extend(backstretchInstance.options, options);
                backstretchInstance.destroy(true);
            }

            backstretchInstance = new Backstretch(this, images, options);
            $this.data("backstretch", backstretchInstance);
        });
    };

    $.backstretch = function (images, options) {
        return $("body").backstretch(images, options).data("backstretch");
    };

    $.expr[":"].backstretch = function (el) {
        return $(el).data("backstretch") !== undefined;
    };

    $.fn.backstretch.defaults = {
        centeredX: true,
        centeredY: true,
        duration: 5000,
        fade: 0
    };

    var defaultStyles = {
        left: 0,
        top: 0,
        overflow: "hidden",
        margin: 0,
        padding: 0,
        height: "400px",
        width: "100%",
        zIndex: -999999
    };

    var imgStyles = {
        position: "absolute",
        display: "none",
        margin: 0,
        padding: 0,
        border: "none",
        width: "auto",
        height: "400px",
        maxHeight: "none",
        maxWidth: "none",
        zIndex: -999999
    };

    function Backstretch(container, images, options) {
        this.options = $.extend({}, $.fn.backstretch.defaults, options || {});
        this.images = $.isArray(images) ? images : [images];

        $.each(this.images, function () {
            $("<img />")[0].src = this;
        });

        this.isBody = container === document.body;
        this.$container = $(container);
        this.$root = this.isBody ? ($(window)) : this.$container;

        var $existingWrap = this.$container.children(".backstretch").first();
        this.$wrap = $existingWrap.length ? $existingWrap : $('<div class="backstretch"></div>').css(defaultStyles).appendTo(this.$container);

        if (!this.isBody) {
            var position = this.$container.css("position");
            var zIndex = this.$container.css("zIndex");
            this.$container.css({
                position: position === "static" ? "relative" : position,
                zIndex: zIndex === "auto" ? 0 : zIndex,
                background: "none"
            });
            this.$wrap.css({ zIndex: -999998 });
        }

        this.$wrap.css({
            position: this.isBody && isModernBrowser ? "fixed" : "absolute"
        });

        this.index = 0;
        this.show(this.index);

        $(window).on("resize.backstretch", $.proxy(this.resize, this))
            .on("orientationchange.backstretch", $.proxy(function () {
                if (this.isBody && window.pageYOffset === 0) {
                    window.scrollTo(0, 1);
                    this.resize();
                }
            }, this));
    }

    Backstretch.prototype = {
        resize: function () {
            try {
                var newStyles = { left: 0, top: 0 };
                var rootWidth = this.isBody ? this.$root.width() : this.$root.innerWidth();
                var rootHeight = this.isBody ? (window.innerHeight || this.$root.height()) : this.$root.innerHeight();

                var imageHeight = rootWidth / this.$img.data("ratio");
                if (imageHeight >= rootHeight) {
                    if (this.options.centeredY) {
                        newStyles.top = "-" + ((imageHeight - rootHeight) / 2) + "px";
                    }
                } else {
                    var imageWidth = rootHeight * this.$img.data("ratio");
                    if (this.options.centeredX) {
                        newStyles.left = "-" + ((imageWidth - rootWidth) / 2) + "px";
                    }
                    imageHeight = rootHeight;
                }

                this.$wrap.css({ width: rootWidth, height: rootHeight })
                    .find("img:not(.deleteable)").css({ width: rootWidth, height: imageHeight }).css(newStyles);
            } catch (e) { }

            return this;
        },

        show: function (index) {
            if (Math.abs(index) > this.images.length - 1) {
                return;
            }

            var self = this;
            var $oldImage = self.$wrap.find("img").addClass("deleteable");
            var eventArgs = { relatedTarget: self.$container[0] };

            self.$container.trigger($.Event("backstretch.before", eventArgs), [self, index]);

            this.index = index;

            clearInterval(self.interval);

            self.$img = $("<img />")
                .css(imgStyles)
                .on("load", function () {
                    var width = this.width || $(this).width();
                    var height = this.height || $(this).height();

                    $(this).data("ratio", width / height);

                    $(this).fadeIn(self.options.speed || self.options.fade, function () {
                        $oldImage.remove();
                        if (!self.paused) {
                            self.cycle();
                        }
                        $.each(["after", "show"], function () {
                            self.$container.trigger($.Event("backstretch." + this, eventArgs), [self, index]);
                        });
                    });

                    self.resize();
                }).appendTo(self.$wrap);

            self.$img.attr("src", self.images[index]);

            return self;
        },

        next: function () {
            return this.show(this.index < this.images.length - 1 ? this.index + 1 : 0);
        },

        prev: function () {
            return this.show(this.index === 0 ? this.images.length - 1 : this.index - 1);
        },

        pause: function () {
            this.paused = true;
            return this;
        },

        resume: function () {
            this.paused = false;
            this.next();
            return this;
        },

        cycle: function () {
            if (this.images.length > 1) {
                clearInterval(this.interval);
                this.interval = setInterval($.proxy(function () {
                    if (!this.paused) {
                        this.next();
                    }
                }, this), this.options.duration);
            }
            return this;
        },

        destroy: function (preserveBackground) {
            $(window).off("resize.backstretch orientationchange.backstretch");
            clearInterval(this.interval);
            if (!preserveBackground) {
                this.$wrap.remove();
            }
            this.$container.removeData("backstretch");
        }
    };

    var isModernBrowser = (function () {
        var userAgent = navigator.userAgent;
        var platform = navigator.platform;

        if ((platform.indexOf("iPhone") > -1 || platform.indexOf("iPad") > -1 || platform.indexOf("iPod") > -1) && userAgent.match(/AppleWebKit\/([0-9]+)/) && RegExp.$1 < 534) {
            return false;
        }

        if (window.operamini && Object.prototype.toString.call(window.operamini) === "[object OperaMini]") {
            return false;
        }

        if (userAgent.match(/Opera Mobi\/([0-9]+)/) && RegExp.$1 < 7458) {
            return false;
        }

        if (userAgent.indexOf("Android") > -1 && userAgent.match(/AppleWebKit\/([0-9]+)/) && RegExp.$1 < 533) {
            return false;
        }

        if (userAgent.match(/Fennec\/([0-9]+)/) && RegExp.$1 < 6) {
            return false;
        }

        if ("palmGetResource" in window && userAgent.match(/AppleWebKit\/([0-9]+)/) && RegExp.$1 < 534) {
            return false;
        }

        if (userAgent.indexOf("MeeGo") > -1 && userAgent.indexOf("NokiaBrowser/8.5.0") > -1) {
            return false;
        }

        if (userAgent.match(/MSIE ([0-9]+)/) && RegExp.$1 <= 6) {
            return false;
        }

        return true;
    })();
})(jQuery, window);
